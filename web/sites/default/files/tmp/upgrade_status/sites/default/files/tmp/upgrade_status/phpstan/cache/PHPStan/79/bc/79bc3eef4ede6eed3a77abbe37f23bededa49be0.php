<?php declare(strict_types = 1);

return PHPStan\Cache\CacheItem::__set_state(array(
   'variableKey' => '/Users/bradleywaye/Sites/local.sycamoretrust.com/web/modules/contrib/commerce/modules/order/src/AdjustmentTransformerInterface.php-1624732871',
   'data' => 
  array (
    '7a977ada8bfbcf7d76aaa94c3d70d562' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
 * Provides common logic for processing and transforming adjustments.
 */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Drupal\\commerce_order',
         'uses' => 
        array (
        ),
         'className' => 'Drupal\\commerce_order\\AdjustmentTransformerInterface',
         'functionName' => NULL,
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
           'lowerBoundTypes' => 
          array (
          ),
        )),
         'typeAliasesMap' => 
        array (
        ),
         'bypassTypeAliases' => false,
      )),
    )),
    '1421c9d1e68f6ffaf72e33ebeed58e88' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
   * Combines, sorts, and rounds the given adjustments.
   *
   * @param \\Drupal\\commerce_order\\Adjustment[] $adjustments
   *   The adjustments.
   *
   * @return \\Drupal\\commerce_order\\Adjustment[]
   *   The processed adjustments.
   */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Drupal\\commerce_order',
         'uses' => 
        array (
        ),
         'className' => 'Drupal\\commerce_order\\AdjustmentTransformerInterface',
         'functionName' => 'processAdjustments',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
           'lowerBoundTypes' => 
          array (
          ),
        )),
         'typeAliasesMap' => 
        array (
        ),
         'bypassTypeAliases' => false,
      )),
    )),
    '6ea79d9103b16cdbc58cea29216f1cda' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
   * Combines adjustments with the same type and source ID.
   *
   * For example, all tax adjustments generated by the same tax type
   * will be combined into a single adjustment, which can then be shown
   * in total summaries.
   *
   * @param \\Drupal\\commerce_order\\Adjustment[] $adjustments
   *   The adjustments.
   *
   * @return \\Drupal\\commerce_order\\Adjustment[]
   *   The combined adjustments.
   */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Drupal\\commerce_order',
         'uses' => 
        array (
        ),
         'className' => 'Drupal\\commerce_order\\AdjustmentTransformerInterface',
         'functionName' => 'combineAdjustments',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
           'lowerBoundTypes' => 
          array (
          ),
        )),
         'typeAliasesMap' => 
        array (
        ),
         'bypassTypeAliases' => false,
      )),
    )),
    '8386778d5f7733d29d1983f6dceaab20' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
   * Sorts adjustments by their type\'s weight.
   *
   * For example, tax adjustments will be placed after promotion adjustments,
   * because the tax adjustment type has a higher weight than the promotion
   * one, as defined in commerce_order.commerce_adjustment_types.yml.
   *
   * @param \\Drupal\\commerce_order\\Adjustment[] $adjustments
   *   The adjustments.
   *
   * @return \\Drupal\\commerce_order\\Adjustment[]
   *   The sorted adjustments.
   */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Drupal\\commerce_order',
         'uses' => 
        array (
        ),
         'className' => 'Drupal\\commerce_order\\AdjustmentTransformerInterface',
         'functionName' => 'sortAdjustments',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
           'lowerBoundTypes' => 
          array (
          ),
        )),
         'typeAliasesMap' => 
        array (
        ),
         'bypassTypeAliases' => false,
      )),
    )),
    'b6713430c60243f454b3f8ed8c4093a9' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
   * Rounds adjustments to their currency precision.
   *
   * For example, USD adjustments will be rounded to 2 decimals.
   *
   * @param \\Drupal\\commerce_order\\Adjustment[] $adjustments
   *   The adjustments.
   * @param int $mode
   *   The rounding mode. One of the following constants: PHP_ROUND_HALF_UP,
   *   PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN, PHP_ROUND_HALF_ODD.
   *
   * @return \\Drupal\\commerce_order\\Adjustment[]
   *   The rounded adjustments.
   */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Drupal\\commerce_order',
         'uses' => 
        array (
        ),
         'className' => 'Drupal\\commerce_order\\AdjustmentTransformerInterface',
         'functionName' => 'roundAdjustments',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
           'lowerBoundTypes' => 
          array (
          ),
        )),
         'typeAliasesMap' => 
        array (
        ),
         'bypassTypeAliases' => false,
      )),
    )),
    '276e1d8e865f4d4882572948ee0ace06' => 
    PHPStan\PhpDoc\NameScopedPhpDocString::__set_state(array(
       'phpDocString' => '/**
   * Rounds an adjustment to its currency precision.
   *
   * For example, a USD adjustment will be rounded to 2 decimals.
   *
   * @param \\Drupal\\commerce_order\\Adjustment $adjustment
   *   The adjustment.
   * @param int $mode
   *   The rounding mode. One of the following constants: PHP_ROUND_HALF_UP,
   *   PHP_ROUND_HALF_DOWN, PHP_ROUND_HALF_EVEN, PHP_ROUND_HALF_ODD.
   *
   * @return \\Drupal\\commerce_order\\Adjustment
   *   The rounded adjustment.
   */',
       'nameScope' => 
      PHPStan\Analyser\NameScope::__set_state(array(
         'namespace' => 'Drupal\\commerce_order',
         'uses' => 
        array (
        ),
         'className' => 'Drupal\\commerce_order\\AdjustmentTransformerInterface',
         'functionName' => 'roundAdjustment',
         'templateTypeMap' => 
        PHPStan\Type\Generic\TemplateTypeMap::__set_state(array(
           'types' => 
          array (
          ),
           'lowerBoundTypes' => 
          array (
          ),
        )),
         'typeAliasesMap' => 
        array (
        ),
         'bypassTypeAliases' => false,
      )),
    )),
  ),
));